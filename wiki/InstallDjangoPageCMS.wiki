#summary Explain how to integrate django page cms into a legacy django project
#labels Featured

=Install in legacy project=

==Install by using pip==

use :

{{{
sudo easy_install pip
sudo pip install -r requirements/external_apps.txt
}}}

Every package listed in the `external_app.txt` should be downloaded and installed.

==Install by using easy_install==

On debian linux you can do:

{{{
sudo easy_install html5lib
sudo easy_install django-page-cms
}}}

Tagging *must be installed by hand or with subversion* because the available package is not 
compatible with django 1.0.

Django-mptt should be installed by hand or with subversion because the available package is not compatible with django 1.0.

==Install by using subversion externals==

You can also use the trunk version of the Django page CMS by using subversion externals

{{{
$ svn pe svn:externals .
pages                   http://django-page-cms.googlecode.com/svn/trunk/pages
mptt                    http://django-mptt.googlecode.com/svn/trunk/mptt
tagging                 http://django-tagging.googlecode.com/svn/trunk/tagging
}}}

==Urls==

Please take a look in the urls.py of the default project and copy desired urls in your settings. Basically you need to have something like this:

{{{
urlpatterns = patterns('',
    ...
    url(r'^pages/', include('pages.urls')),
    (r'^admin/(.*)', admin.site.root),
)
}}}

==Settings==

All the Django page CMS specific settings and options are listed and explained in the pages/settings.py file.

Django page CMS require that several of these settings to be set. You will recognize these settings in the following document by a bold "*must*". 

===Tagging===

Tagging is optional. If you don't want it please don't set PAGE_TAGGING setting into your settings. After that simply add wanted apps to your installed apps :

{{{
INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.admin',
    'django.contrib.sites',
    'mptt',
    'tagging',
    'pages',
    ...
)
}}}

===Caching===

Django page CMS use the caching framework quite intensively. You should definitely set-up [http://docs.djangoproject.com/en/dev/topics/cache/#setting-up-the-cache use one of the caching backend] to have decent performance.

If you cannot setup memcache or a database cache, you can use the local memory cache this way:

{{{
CACHE_BACKEND = "locmem:///?max_entries=5000"
}}}

===Languages===

Please first read how django handle languages: 

 * http://docs.djangoproject.com/en/dev/ref/settings/#languages
 * http://docs.djangoproject.com/en/dev/ref/settings/#language-code

This CMS use the PAGE_LANGUAGES setting in order to present which language are supported by the CMS. 

By default PAGE_LANGUAGES value is set to LANGUAGES settings so you can directly set the LANGUAGES setting if you want. 

You *should set* PAGE_LANGUAGES or LANGUAGES yourself because by default the LANGUAGES list is big.

Django use LANGUAGES setting to set the request.LANGUAGE_CODE that is used by this CMS. So if the language you want to support is not present in the LANGUAGES setting, request.LANGUAGE_CODE will not be set correctly.

A possible solution is to redefine settings.LANGUAGES. For example you can do :

{{{
# here is all the languages you want to be supported by the CMS
PAGE_LANGUAGES = (
    ('de', gettext_noop('German')),
    ('fr-ch', gettext_noop('Swiss french')),
    ('en-us', gettext_noop('US English')),
)

# You should add here all language you want to accept as valid client language
languages = list(PAGE_LANGUAGES)
languages.append(('fr-fr', gettext_noop('French')))
languages.append(('fr-be', gettext_noop('Belgium french')))
# redefine the LANGUAGES setting in order to set request.LANGUAGE_CODE correctly
LANGUAGES = languages

# This enable you to map a language(s) to another one, these languages should
# be in the LANGUAGES config
def language_mapping(lang):
    if lang.startswith('fr'):
        # serve swiss french for everyone
        return 'fr-ch'
    return lang

PAGE_LANGUAGE_MAPPING = language_mapping
}}}

===Template context processors and Middlewares===

You *must* have this TEMPLATE_CONTEXT_PROCESSORS constant into your  setting:

{{{
TEMPLATE_CONTEXT_PROCESSORS = (
    ...
    "django.core.context_processors.auth",
    "django.core.context_processors.i18n",
    "django.core.context_processors.debug",
    "django.core.context_processors.media",
    "django.core.context_processors.request",
    "pages.context_processors.media",
    ...
)
}}}

You *must* have these middleware into your MIDDLEWARE_CLASSES setting:

{{{
MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.doc.XViewMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    ...
)
}}}

===Default template===

You *must* set DEFAULT_PAGE_TEMPLATE to the name of your default CMS template.

{{{
DEFAULT_PAGE_TEMPLATE = 'pages/index.html'
}}}

And you *must* copy the directory "example/templates/pages" into your root template directory.

===Additional templates===

Optionally you can set PAGE_TEMPLATES if you want additional templates choices. In the the example application you have actually this:

{{{
PAGE_TEMPLATES = (
    ('pages/nice.html', 'nice one'),
    ('pages/cool.html', 'cool one'),
)
}}}

===The sites framework===

If you want to use the [http://docs.djangoproject.com/en/dev/ref/contrib/sites/#ref-contrib-sites Django sites framework] with django-page-cms, you *must* define the SITE_ID and PAGE_USE_SITE_ID settings and create the appropriate Site object into the admin interface.

{{{
PAGE_USE_SITE_ID = True
SITE_ID = 1
}}}

The Site object should have the domain that match your actual domain (ie: 127.0.0.1:8000)

===Media directory===

You *must* create a symbolic link or copy of "pages/media/pages/" into your media directory to have a fully functioning admin interface.